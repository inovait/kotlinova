/*
 * Copyright 2023 INOVA IT d.o.o.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 *  is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 *   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package si.inova.kotlinova.retrofit.callfactory

import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonEncodingException
import retrofit2.Response
import si.inova.kotlinova.core.exceptions.DataParsingException
import si.inova.kotlinova.core.exceptions.NoNetworkException
import si.inova.kotlinova.core.exceptions.UnknownCauseException
import si.inova.kotlinova.core.outcome.CauseException
import java.io.IOException

/**
 * Returns either a response, if this response was successful or throws a [CauseException] that matches error body
 * (parsed via provided [ErrorHandler]).
 */
fun <T> Response<T>.bodyOrThrow(errorHandler: ErrorHandler? = null): T = if (isSuccessful) {
   val body = body()
   @Suppress("IfThenToElvis") // This looks better
   if (body == null) {
      // Body can be null when server returns 204. Assume we are expecting
      // Unit type and return it accordingly
      @Suppress("UNCHECKED_CAST")
      Unit as T
   } else {
      body
   }
} else {
   val exception = try {
      val rawRequestException = createParentException()

      errorHandler?.generateExceptionFromErrorBody(this, rawRequestException)
         ?: rawRequestException.transformRetrofitException(raw().request.url.toString())
   } catch (e: Exception) {
      e.transformRetrofitException("${raw().request.url} (with \"${code()} ${message()}\" error)")
   }

   throw exception
}

internal fun Response<*>.createParentException(): Exception {
   return Exception("Endpoint call to ${raw().request.url} failed: ${code()} ${message()}")
}

/**
 * Transform exception generated by retrofit into semantic [CauseException].
 */
fun Throwable.transformRetrofitException(requestDetails: String): CauseException {
   return when (this) {
      is CauseException -> this
      is JsonDataException, is JsonEncodingException -> DataParsingException("Failed to parse $requestDetails", cause = this)
      is IOException -> NoNetworkException(cause = this, message = "Failed to load $requestDetails")
      else -> UnknownCauseException("Failed to load $requestDetails", cause = this)
   }
}
