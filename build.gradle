buildscript {
    apply from: 'libraries.gradle'

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${versions.kotlin}"
        classpath "de.mobilej.unmock:UnMockPlugin:${versions.unmock}"
    }

    def versions = new Properties()
    file("version.properties").withInputStream { versions.load(it) }

    ext {
        MAJOR_VERSION = versions.getProperty("MAJOR")
        MINOR_VERSION = versions.getProperty("MINOR")
        PATCH_VERSION = versions.getProperty("PATCH")

        VERSION = "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
    }
}

subprojects {
    ext.isAndroid =  {
        return project.hasProperty("android")
    }

    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }

    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('si.inova.kotlinova:core') with project(':core')
                substitute module('si.inova.kotlinova:android') with project(':android')
            }

            eachDependency { details ->
                // Sometimes external libraries could include outdated support library.
                // Force all of the primary support libraries to use the same version.
                if (details.requested.group == 'com.android.support'
                        && details.requested.name != 'multidex'
                        && details.requested.name != 'multidex-instrumentation') {
                    details.useVersion versions.androidSupportLib
                }
            }

        }
    }

    afterEvaluate {
        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
        }

        kotlin {
            /**
             * This looks scary, but coroutines are only experimental in a sense that
             * there may be future (non-breaking) API changes.
             *
             * Otherwise they are completely stable, backwards compatible and ready to use in production.
             *
             * Source: https://stackoverflow.com/a/46240340 (written by coroutines project member)
             */
            experimental {
                coroutines "enable"
            }
        }

        allOpen {
            annotation("si.inova.kotlinova.testing.OpenForTesting")
        }

        kapt {
            useBuildCache = System.getenv('ENABLE_KAPT_BUILD_CACHE') == "TRUE"
        }

        if (it.plugins.hasPlugin("de.mobilej.unmock")) {
            unMock {
                keep "android.widget.BaseAdapter"
                keep "android.widget.ArrayAdapter"
                keep "android.os.Bundle"
                keepStartingWith "android.database.MatrixCursor"
                keep "android.database.AbstractCursor"
                keep "android.database.CrossProcessCursor"
                keepStartingWith "android.text.TextUtils"
                keepStartingWith "android.util."
                keepStartingWith "android.text."
                keepStartingWith "android.content.ContentValues"
                keepStartingWith "android.content.ComponentName"
                keepStartingWith "android.content.ContentUris"
                keepStartingWith "android.content.ContentProviderOperation"
                keepStartingWith "android.content.ContentProviderResult"
                keepStartingWith "android.content.UriMatcher"
                keepStartingWith "android.content.Intent"
                keep "android.location.Location"
                keepStartingWith "android.content.res.Configuration"
                keepStartingWith "org."
                keepStartingWith "libcore."
                keepStartingWith "com.android.internal.R"
                keepStartingWith "com.android.internal.util."
                keep "android.net.Uri"

                keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
            }
        }
    }
}

apply from: 'ci.gradle'