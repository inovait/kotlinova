buildscript {
    apply from: 'libraries.gradle'

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${versions.kotlin}"
        classpath "de.mobilej.unmock:UnMockPlugin:${versions.unmock}"
    }

    def versions = new Properties()
    file("version.properties").withInputStream { versions.load(it) }

    ext {
        MAJOR_VERSION = versions.getProperty("MAJOR")
        MINOR_VERSION = versions.getProperty("MINOR")
        PATCH_VERSION = versions.getProperty("PATCH")

        VERSION = "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
    }
}

subprojects {
    ext.isAndroid =  {
        return project.hasProperty("android")
    }

    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }

    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('si.inova.kotlinova:core') with project(':core')
                substitute module('si.inova.kotlinova:rx') with project(':rx')
                substitute module('si.inova.kotlinova:android') with project(':android')
                substitute module('si.inova.kotlinova:gms') with project(':gms')
                substitute module('si.inova.kotlinova:retrofit') with project(':retrofit')
                substitute module('si.inova.kotlinova:room') with project(':room')
            }
        }
    }

    afterEvaluate {
        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
        }

        // Some experimental APIs are used on the testing side to ease testing with coroutines
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
        }

        allOpen {
            annotation("si.inova.kotlinova.testing.OpenForTesting")
        }

        if (it.plugins.hasPlugin("de.mobilej.unmock")) {
            unMock {
                keep "android.widget.BaseAdapter"
                keep "android.widget.ArrayAdapter"
                keep "android.os.Bundle"
                keepStartingWith "android.database.MatrixCursor"
                keep "android.database.AbstractCursor"
                keep "android.database.CrossProcessCursor"
                keepStartingWith "android.text.TextUtils"
                keepStartingWith "android.util."
                keepStartingWith "android.text."
                keepStartingWith "android.content.ContentValues"
                keepStartingWith "android.content.ComponentName"
                keepStartingWith "android.content.ContentUris"
                keepStartingWith "android.content.ContentProviderOperation"
                keepStartingWith "android.content.ContentProviderResult"
                keepStartingWith "android.content.UriMatcher"
                keepStartingWith "android.content.Intent"
                keep "android.location.Location"
                keepStartingWith "android.content.res.Configuration"
                keepStartingWith "org."
                keepStartingWith "libcore."
                keepStartingWith "com.android.internal.R"
                keepStartingWith "com.android.internal.util."
                keep "android.net.Uri"

                keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
            }

            dependencies {
                unmock "org.robolectric:android-all:${versions.unmockAndroidVersion}"
            }
        }
    }
}

apply from: 'ci.gradle'